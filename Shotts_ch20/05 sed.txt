[Title Screen: Command Line Basics: sed]

Let's take a look at command line basics: sed.

sed is short for stream editor.

This command performs text editing on a stream of text.

The text stream may be from files or the standard input.

Let's take a look at sed's man page.

[Type man sed ENTER]

Note that sed performs its editing through scripts,

[Highlight {script-...} in the SYNOPSIS]

A script consists of editing commands.

It is possible to issue multiple editing commands in one script,

to perform rather complex editing.

Here, we will demonstrate sed with a single editing command.

[Type echo "front" | sed 's/front/back/']

In this command, we sent a line of text "front" to the standard output, and piped it to sed.

[Highlight echo "front" | sed in the command]

sed is asked to perform an editing command on this line of text.

The command is a substitution, signalled by the letter s,

[Highlight s in the command]

And sed will look for the string 'front' in the input text,

[Highlight front in the command]

and replace it with the string 'back'.

[Highlight back in the command]
[Press ENTER]

And we get a line of text 'back'.

The slash character in this command is a commonly used delimiter when using sed.

But it is not obligatory.

sed will reconize any character that immediately follows the substitution command as the delimiter.

Thus, the same operation can be performed with a different delimiter, as long you use the same delimiter character through the command.

Let's use a different delimiter in sed.

[Type echo "front" | sed 's_front_back_' ENTER]

It is also important to always terminate the substitution command with a delimiter.

[Highlight the last _ in the previous command]

By default, sed will perform its editing command on every line in the input.

And sed will also only replace the first instance of match on each line of text in the input.

Let's first try sed with multiple matches in one line.

[Type echo "aaabbbccc" | sed 's/b/B/' ENTER]

This command asks sed to replace the lowercase letter b with the uppercase letter B.

As we see, sed has only done so to the first instance of lowercase letter b in the line of text.

[Highlight Bbb in the output]

To replace all occurences of matches in a line, use the g flag at the end of the replacement string, for global substitution.

[Type echo "aaabbbccc" | sed 's/b/B/g']
[Highlight /g in the command]
[Press ENTER]

And we see that with the g flag, sed has replaced all lowercase letter b's in the input text.

[Highlight BBB in the output]

Now Let's see sed working on multiline text.

[Type echo "front ENTER another front" | sed 's/front/back/' ENTER]

Here we have pressed ENTER after the first front and create two lines of text as the input to sed.

And sed has replaced the word 'front' to 'back' on both lines.

But sed can be directed to perform editing commands only on specific lines of the input stream.

Lines can be specified with a line number preceding the command.

Let's try replacing only the word front on the second line.

[Type echo "front ENTER another front" | sed '2s/front/back/']

In this command, we have added the number two to the front of the editing command.

[Press ENTER]

And sed will only perform the substitution on the second line of text.

A range of lines may be specified with two numbers.

[Type echo "first doctor ENTER second doctor ENTER third doctor ENTER fourth doctor ENTER fifth doctor ENTER" | sed '2,4s/doctor/companion/']

In this command, we have five lines of text on the input.

And sed is specified to perform a substitution on the second to the fourth line only.

[Highlight 2,4 in the command]
[Press ENTER]

Lines may also be specified by a regular expression.

That is, sed will perform its editing command on a line if the line has a match with a regular expression.

sed only accepts basic regular expressions.

If a regular expression contains extended regular expression metacharacters, such as quantifier characters,

they have to be preceded by backslashes to be interpreted as metacharacters.

Let's try sed with a reguar expression.

[Type echo "first doctor ENTER second doctor ENTER third doctor ENTER fourth doctor ENTER fifth doctor ENTER" | sed '/ir/s/doctor/companion/']

This command has a regular expression enclosed in delimiting slashes before the substitution command.

[Highlight /ir/ in the command]

So sed will only make a substitution on lines that contain the string 'ir'.

It is possible to ask sed to just print a specified line of text as the editing command. 

To do this, use the command p.

However, sed prints every line of input by default, so to use the p command effectively, we need to use the option -n to turn of the default printing.

This is useful when we just want to check which lines a regular expression will match.

Let's try to print matched lines of text with the p command.

[Type echo "first doctor ENTER second doctor ENTER third doctor ENTER fourth doctor ENTER fifth doctor ENTER" | sed -n '/ir/p' ENTER]

And this command has printed all the lines that contain the string 'ir'.

sed also supports a feature called back references.

With back reference, we can construct a replacement string that refers back to parts of the regular expression.

This is useful when we wish to swap parts of the input text around, rather than to replace them entirely.

Let's try using sed with back references.

[Type echo "12/25/2017" | sed 's/\([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{4\}\)/\3-\1-\2/']

In this command, we have an input line of text,

that contains a date in the month slash date slash year format.

[Highlight "12/25/2017" in the command]

And we would like to change this to the year dash month dash date format.

So we first issue sed a substitution command.

[Highlight the s/ in the command]

Then we construct a real expression that matches the input date format.

[Highlight \([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{4\}\)]

The three pairs of parentheses, with backslashes, create three sub expressions.

The first subexpression is two digits representing the month.

[Highlight the first \([0-9]\{2\}\)]

The second subexpression is two digits representing the date.

[Highlight the second \([0-9]\{2\}\)]

The third subexpression is four digits representing the year.

[Highlight \([0-9]\{4\}\)]

So sed will use this regular expression to search for dates of this specific format.

Finally, we construct a replacement string.

[Highlight \3-\1-\2 in the command]

The numbers in this string will refer back to the subexpressions in the regular expression we just constructed.

Thus, it gives us the year, dash, the month, dash, and the day.

[Press ENTER]

And we have the date in a new format.